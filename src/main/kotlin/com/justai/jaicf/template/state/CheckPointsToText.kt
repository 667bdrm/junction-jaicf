package com.justai.jaicf.template.state

fun CheckPoints.getReadableResults() : Pair<List<String>, List<String>> {
    val positive = mutableListOf<String>()
    var negative = mutableListOf<String>()

    when (KeepCalm) {
        true -> positive.add("Благодаря твоей помощи я смог сохранить спокойствие в экстремальной ситуации.")
        false -> negative.add("Я в полном шоке. Мне потребуется время, чтобы прийти в себя.")
    }

    when (CallFirefighters) {
        true -> positive.add("Ты посоветовал мне позвонить пожарным. Это обязательный первый пункт в любой инструкции по спасению от пожара. Ты молодец.\n")
        false -> negative.add("Ты упустил то, с чего начинается спасение от любого пожара, — с вызова пожарных. На твоё счастье, я сделал это сам, прежде чем запаниковать и позвонить тебе.")
    }

    when (OpenWindow) {
        false -> positive.add("Ты был прав, запретив мне открыть окно. Приток кислорода только заставил бы огонь сильнее разгореться.")
        true -> negative.add("Во время пожара не стоит открывать +окна, только если ты не планируешь выбраться через них наружу. Благодаря притоку кислорода из окна огонь разгорится сильн+ее.")
    }

    when (CheckDoorknob) {
        true -> positive.add("Важно проверить температуру двери или металлической ручки. Если она горячая, вероятно, за дверью полыхает огонь, и лучше остаться внутри.")
        false -> negative.add("Я не проверил, нагрелась ли дверь, и распахнул её. Мне крупно повезло, что за дверью не полыхал огонь.\n")
    }

    when (GetExtraClothes) {
        false -> positive.add("Ты правильно оценил ситуацию. В случае пожара стоит взять лишь самое важное — паспорт, телефон, деньги — и бежать.")
        true -> negative.add("Никакого чемодана! Стоит захватить жизненно важное — паспорт, телефон, деньги — и бежать.")
    }

    when (LeaveDoorClosed) {
        true -> positive.add("Ты дал мне правильный совет. В случае пожара, выходя, нужно плотно закрыть за собой дверь, чтобы сквозняк не смог раздуть огонь. Закрывать дверь на ключ не нужно: на ушло бы драгоценное время и у меня, и у ищущих пострадавших пожарных.")
        false -> negative.add("Я зря оставил дверь распахнутой. Сквозняк может дополнительно раздуть огонь.")
    }

    when (ChooseEmergencyPath) {
        EmergencyPaths.Stair -> positive.add("Ты правильно посоветовал мне пойти по лестнице. Лифт при пожаре может быть смертельно опасен!")
        EmergencyPaths.Elevator -> negative.add("Пользоваться лифтом категорически нельзя! Во время пожара обычно отключается электричество, я мог бы застрять, что в такой ситуации особенно опасно. А ещё шахта лифта во время пожара работает как вытяжка, и в ней можно просто задохнуться. Хорошо, что я всё-таки пошёл пешком.")
    }

    when (ActivateFireAlarm) {
        true -> positive.add("Нажав на кнопку, я включил систему оповещения о пожаре, которая почему-то не сработала автоматически. Это простое действие может спасти жизнь и здоровье тех, кто ещё не знает о начавшемся пожаре, дав им время эвакуироваться.")
        false -> negative.add("Я не нажал на кнопку и не запустил систему пожарного оповещения. Хотя в общежитии почти не было людей, кого-то из оставшихся там пожар мог застать врасплох.")
    }

    when (RunOnStair) {
        true -> negative.add("Я торопился, упал на лестнице и подвернул ногу. Пожар — чрезвычайная ситуация, и нужно поскорее оказаться в безопасности. Однако очень важно не поддаваться панике, чтобы не подвергнуть себя ещё большему риску.")
    }

    when (GoToSmoke) {
        false -> positive.add("Я поступил правильно, решив не идти в дым, а укрыться в комнате и ждать пожарных. Так меньше риск надышаться угарным газом или, двигаясь вслепую, получить травму.")
        true -> negative.add("Я надышался дыма. Но могло быть и хуже: я мог наступить на что-то острое или провалиться, потому что в дыму ничего не видно. Если путь наружу задымлён, лучше закрыться в комнате, заткнуть щели и ждать пожарных.")
    }

    when (FillGap) {
        true -> positive.add("Мне повезло оказаться именно в кухне. Там есть тряпки и источник воды. Сырой тканью стоит забить щель под дверью и вентиляцию: это на какое-то время защитит от дыма и высокой температуры.")
        false -> negative.add("Я закрыл дверь, но через щели дым всё равно просачивался в комнату. Мне было тяжело дышать, глаз+а слезились. Долго бы я не выдержал. Мне повезло, что пожарные приехали быстро.")
    }

    when (AlertFirefighters) {
        true -> positive.add("А ты знаток! Я помахал в окно белой тряпкой, и пожарные быстро заметили и смогли меня эвакуировать.")
        false -> negative.add("Пока ты не в полной безопасности, не стоит расслабляться. Если бы я постарался подать знак пожарным, возможно, они заметили бы меня гораздо раньше и эвакуировали до того, как я начал паниковать.")
    }

    when (WindowJump) {
        true -> negative.add("Прыгать из окон при пожаре безумно опасно! Это можно рассматривать лишь как крайнюю меру — в случае, когда тебе грозит неминуемая гибель. Максимально допустимая высота прыжка — третий этаж. Мне крайне повезло отделаться всего лишь сломанной ногой.")
    }

    return Pair(positive, negative)
}

fun CheckPoints.getCompactNegative() : String? {
    val messages = mutableListOf<String>()

    if (CallFirefighters == false)
        messages.add("вызовом пожарных")

    if (OpenWindow == true)
        messages.add("открытием окна")

    if (GetExtraClothes == true)
        messages.add("чемоданом")

    if (CheckDoorknob == false || LeaveDoorClosed == false || DoorClosedByKey == true)
        messages.add("дверью из комнаты")

    if (ChooseEmergencyPath != EmergencyPaths.Stair)
        messages.add("лифтом")

    if (ActivateFireAlarm == false)
        messages.add("кнопкой пожарной тревоги")

    if (RunOnStair == true || GoToSmoke == true)
        messages.add("лестницей")

    if (FillGap == false || FillGapWithWetCloth == false)
        messages.add("дверью на кухню")

    if (WindowJump == true)
        messages.add("деревом")

    if (AlertFirefighters == false)
        messages.add("сигналом пожарным")

    return when (messages.size) {
        0 -> null
        1 -> messages[0]
        else -> "${messages.dropLast(1).joinToString(separator = ", ")} и ${messages.last()}"
    }
}